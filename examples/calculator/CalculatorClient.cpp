#include <string.h>
#include <iostream>
#include <string>

#include "ZserioServiceGrpc.h"
#include "calculator/Calculator.h"

enum class Mode : uint8_t
{
    POWER_OF_TWO,
    SQUARE_ROOT
};

void printHelp()
{
    std::cout << "Help:\n"
              << "   h            Prints this help.\n"
              << "   p            Sets powerOfTwo(int32) mode.\n"
              << "   s            Sets squareRoot(double) mode.\n"
              << " INPUT          Any valid input for the current mode.\n"
              << "   q            Quits the client.\n"
              << "\n"
              << "Note that the letter before the '>' denotes the current mode." << std::endl;
}

void powerOfTwo(calculator::Calculator::Client& client, std::string input)
{
    calculator::I32 request;
    try
    {
        size_t end;
        request.setValue(stoi(input, &end));
        if (end != input.size())
            throw std::invalid_argument("Parsed only to position: " + std::to_string(end));
    }
    catch (const std::exception& e)
    {
        std::cout << "Error: '" << input << "' cannot be converted to int32!" << std::endl;
        std::cout << e.what() << std::endl;
        return;
    }

    calculator::U64 response;
    try
    {
        client.powerOfTwoMethod(request, response);
    }
    catch (const zserio::ServiceException& e)
    {
        std::cout << e.what() << std::endl;
    }

    std::cout << response.getValue() << std::endl;
}

void squareRoot(calculator::Calculator::Client& client, std::string input)
{
    calculator::Double request;
    try
    {
        size_t end;
        request.setValue(stod(input, &end));
        if (end != input.size())
            throw std::invalid_argument("Parsed only to position: " + std::to_string(end));
    }
    catch (const std::exception& e)
    {
        std::cout << "Error: '" << input << "' cannot be converted to double!" << std::endl;
        std::cout << e.what() << std::endl;
        return;
    }

    calculator::Double response;
    try
    {
        client.squareRootMethod(request, response);
    }
    catch (const zserio::ServiceException& e)
    {
        std::cout << e.what() << std::endl;
    }

    std::cout << response.getValue() << std::endl;
}

int main(int argc, char* argv[])
{
    for (int i = 1; i < argc; ++i)
    {
        if (strncmp(argv[1], "-h", 2) == 0 || strncmp(argv[1], "--help", 6) == 0)
        {
            std::cout << "Usage: " << argv[0] << " [ADDRESS]" << std::endl;
            return 0;
        }
    }

    std::string address = "localhost:5000";
    if (argc > 1)
        address = argv[1];

    std::string input;
    Mode mode = Mode::POWER_OF_TWO;

    std::cout << "Welcome to Zserio Calculator gRPC Client example!\n"
              << "Waiting for connection (terminate with ^C) ..." << std::flush;

    // GrpcClient from ZserioServiceGrpc library
    zserio_service_grpc::GrpcClient grpcClient(
            grpc::CreateChannel(address, grpc::InsecureChannelCredentials()));
    // Calculator client generated by Zserio, uses grpcClient as an zserio::IService
    calculator::Calculator::Client client(grpcClient);

    std::cout << " OK!\n"
              << "Write 'h' + ENTER for help." << std::endl;

    while (true)
    {
        std::cout << (mode == Mode::POWER_OF_TWO ? "p" : "s") << "> " << std::flush;
        getline(std::cin, input);

        if (input.empty())
            continue;

        if (input[0] == 'q')
        {
            std::cout << "Quit." << std::endl;
            return 0;
        }

        if (input[0] == 'h')
        {
            printHelp();
            continue;
        }

        if (input[0] == 'p')
        {
            mode = Mode::POWER_OF_TWO;
            std::cout << "Mode set to powerOfTwo(int32)." << std::endl;
            continue;
        }

        if (input[0] == 's')
        {
            mode = Mode::SQUARE_ROOT;
            std::cout << "Mode set to squareRoot(double)." << std::endl;
            continue;
        }

        if (mode == Mode::POWER_OF_TWO)
            powerOfTwo(client, input);
        else
            squareRoot(client, input);
    }

    return 0;
}
